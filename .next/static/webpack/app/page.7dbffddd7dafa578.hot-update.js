"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-client)/./components/usefulFunctions/encryptar.js":
/*!*************************************************!*\
  !*** ./components/usefulFunctions/encryptar.js ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"compare\": function() { return /* binding */ compare; },\n/* harmony export */   \"encrypted\": function() { return /* binding */ encrypted; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-client)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\nconst crypto = __webpack_require__(/*! crypto */ \"(app-client)/./node_modules/next/dist/compiled/crypto-browserify/index.js\");\n// Generar clave secreta\nconst secretKey = crypto.randomBytes(16); // 128 bits\nconst encrypted = (name)=>{\n    // Cifrar el nombre utilizando AES-128-CBC\n    const iv = crypto.randomBytes(16); // Initialization vector\n    const cipher = crypto.createCipheriv(\"aes-64-cbc\", secretKey, iv);\n    let encrypted = cipher.update(name, \"utf8\", \"base64\");\n    encrypted += cipher.final(\"base32\");\n    // Generar un string que represente el nombre cifrado y la clave secreta\n    const encryptedString = \"\".concat(Buffer.from(iv).toString(\"base64\"), \".\").concat(encrypted);\n    return encryptedString;\n};\nconst compare = (name, encryptedString)=>{\n    // Descifrar el nombre utilizando la clave secreta\n    const parts = encryptedString.split(\".\");\n    const decipher = crypto.createDecipheriv(\"aes-128-cbc\", secretKey, Buffer.from(parts[0], \"base64\"));\n    let decrypted = decipher.update(parts[1], \"base64\", \"utf8\");\n    decrypted += decipher.final(\"utf8\");\n    return decrypted === name;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vY29tcG9uZW50cy91c2VmdWxGdW5jdGlvbnMvZW5jcnlwdGFyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDO0FBRXZCLHdCQUF3QjtBQUN4QixNQUFNQyxZQUFZRixPQUFPRyxXQUFXLENBQUMsS0FBSyxXQUFXO0FBRTlDLE1BQU1DLFlBQVksQ0FBQ0MsT0FBUztJQUVuQywwQ0FBMEM7SUFDMUMsTUFBTUMsS0FBS04sT0FBT0csV0FBVyxDQUFDLEtBQUssd0JBQXdCO0lBQzNELE1BQU1JLFNBQVNQLE9BQU9RLGNBQWMsQ0FBQyxjQUFjTixXQUFXSTtJQUM5RCxJQUFJRixZQUFZRyxPQUFPRSxNQUFNLENBQUNKLE1BQU0sUUFBUTtJQUM1Q0QsYUFBYUcsT0FBT0csS0FBSyxDQUFDO0lBRTFCLHdFQUF3RTtJQUN4RSxNQUFNQyxrQkFBa0IsR0FBeUNQLE9BQXRDUSxNQUFNQSxDQUFDQyxJQUFJLENBQUNQLElBQUlRLFFBQVEsQ0FBQyxXQUFVLEtBQWEsT0FBVlY7SUFFakUsT0FBT087QUFDUCxFQUFDO0FBRU0sTUFBTUksVUFBVSxDQUFDVixNQUFPTSxrQkFBcUI7SUFDcEQsa0RBQWtEO0lBQ2xELE1BQU1LLFFBQVFMLGdCQUFnQk0sS0FBSyxDQUFDO0lBQ3BDLE1BQU1DLFdBQVdsQixPQUFPbUIsZ0JBQWdCLENBQUMsZUFBZWpCLFdBQVdVLE1BQU1BLENBQUNDLElBQUksQ0FBQ0csS0FBSyxDQUFDLEVBQUUsRUFBRTtJQUN6RixJQUFJSSxZQUFZRixTQUFTVCxNQUFNLENBQUNPLEtBQUssQ0FBQyxFQUFFLEVBQUUsVUFBVTtJQUNwREksYUFBYUYsU0FBU1IsS0FBSyxDQUFDO0lBRTVCLE9BQVFVLGNBQVlmO0FBQ3BCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy91c2VmdWxGdW5jdGlvbnMvZW5jcnlwdGFyLmpzP2E0YmUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XHJcblxyXG4vLyBHZW5lcmFyIGNsYXZlIHNlY3JldGFcclxuY29uc3Qgc2VjcmV0S2V5ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KTsgLy8gMTI4IGJpdHNcclxuXHJcbmV4cG9ydCBjb25zdCBlbmNyeXB0ZWQgPSAobmFtZSkgPT4ge1xyXG5cclxuLy8gQ2lmcmFyIGVsIG5vbWJyZSB1dGlsaXphbmRvIEFFUy0xMjgtQ0JDXHJcbmNvbnN0IGl2ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KTsgLy8gSW5pdGlhbGl6YXRpb24gdmVjdG9yXHJcbmNvbnN0IGNpcGhlciA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdignYWVzLTY0LWNiYycsIHNlY3JldEtleSwgaXYpO1xyXG5sZXQgZW5jcnlwdGVkID0gY2lwaGVyLnVwZGF0ZShuYW1lLCAndXRmOCcsICdiYXNlNjQnKTtcclxuZW5jcnlwdGVkICs9IGNpcGhlci5maW5hbCgnYmFzZTMyJyk7XHJcblxyXG4vLyBHZW5lcmFyIHVuIHN0cmluZyBxdWUgcmVwcmVzZW50ZSBlbCBub21icmUgY2lmcmFkbyB5IGxhIGNsYXZlIHNlY3JldGFcclxuY29uc3QgZW5jcnlwdGVkU3RyaW5nID0gYCR7QnVmZmVyLmZyb20oaXYpLnRvU3RyaW5nKCdiYXNlNjQnKX0uJHtlbmNyeXB0ZWR9YDtcclxuXHJcbnJldHVybiBlbmNyeXB0ZWRTdHJpbmdcclxufSBcclxuXHJcbmV4cG9ydCBjb25zdCBjb21wYXJlID0gKG5hbWUgLCBlbmNyeXB0ZWRTdHJpbmcgKSA9PiB7XHJcbi8vIERlc2NpZnJhciBlbCBub21icmUgdXRpbGl6YW5kbyBsYSBjbGF2ZSBzZWNyZXRhXHJcbmNvbnN0IHBhcnRzID0gZW5jcnlwdGVkU3RyaW5nLnNwbGl0KCcuJyk7XHJcbmNvbnN0IGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYoJ2Flcy0xMjgtY2JjJywgc2VjcmV0S2V5LCBCdWZmZXIuZnJvbShwYXJ0c1swXSwgJ2Jhc2U2NCcpKTtcclxubGV0IGRlY3J5cHRlZCA9IGRlY2lwaGVyLnVwZGF0ZShwYXJ0c1sxXSwgJ2Jhc2U2NCcsICd1dGY4Jyk7XHJcbmRlY3J5cHRlZCArPSBkZWNpcGhlci5maW5hbCgndXRmOCcpO1xyXG5cclxucmV0dXJuIChkZWNyeXB0ZWQ9PT1uYW1lKVxyXG59XHJcbiJdLCJuYW1lcyI6WyJjcnlwdG8iLCJyZXF1aXJlIiwic2VjcmV0S2V5IiwicmFuZG9tQnl0ZXMiLCJlbmNyeXB0ZWQiLCJuYW1lIiwiaXYiLCJjaXBoZXIiLCJjcmVhdGVDaXBoZXJpdiIsInVwZGF0ZSIsImZpbmFsIiwiZW5jcnlwdGVkU3RyaW5nIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwiY29tcGFyZSIsInBhcnRzIiwic3BsaXQiLCJkZWNpcGhlciIsImNyZWF0ZURlY2lwaGVyaXYiLCJkZWNyeXB0ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-client)/./components/usefulFunctions/encryptar.js\n"));

/***/ })

});